import * as _typescript_eslint_utils_ts_eslint from '@typescript-eslint/utils/ts-eslint';

type MessageID$1 = "filenameExtensionInvalid" | "filenameExtensionUnexpected";

type MessageID = "filenameCaseMismatchSuggestion" | "filenameEmpty";

declare const _default: {
    readonly meta: {
        readonly name: string;
        readonly version: string;
    };
    readonly rules: {
        readonly "component-name": _typescript_eslint_utils_ts_eslint.RuleModule<"componentName", readonly [{
            allowAllCaps?: boolean;
            allowLeadingUnderscore?: boolean;
            allowNamespace?: boolean;
            excepts?: readonly string[];
            rule?: "CONSTANT_CASE" | "PascalCase";
        } | ("CONSTANT_CASE" | "PascalCase") | undefined], unknown, _typescript_eslint_utils_ts_eslint.RuleListener>;
        readonly filename: _typescript_eslint_utils_ts_eslint.RuleModule<MessageID, readonly [{
            excepts?: readonly string[];
            extensions?: readonly string[];
            rule?: "PascalCase" | "camelCase" | "kebab-case" | "snake_case";
        } | ("PascalCase" | "camelCase" | "kebab-case" | "snake_case") | undefined], unknown, _typescript_eslint_utils_ts_eslint.RuleListener>;
        readonly "filename-extension": _typescript_eslint_utils_ts_eslint.RuleModule<MessageID$1, readonly [{
            allow?: "always" | "as-needed";
            extensions?: readonly string[];
        } | ("always" | "as-needed") | undefined], unknown, _typescript_eslint_utils_ts_eslint.RuleListener>;
        readonly "use-state": _typescript_eslint_utils_ts_eslint.RuleModule<"useState", [], unknown, _typescript_eslint_utils_ts_eslint.RuleListener>;
    };
};

export { _default as default };
