import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/split-pane-react/esm/SplitPane.js
var import_react4 = __toESM(require_react());

// node_modules/split-pane-react/esm/pane.js
var import_react = __toESM(require_react());
function Pane({ children, style, className, role, title }) {
  return import_react.default.createElement("div", { role, title, className, style }, children);
}

// node_modules/split-pane-react/esm/sash.js
var import_react2 = __toESM(require_react());

// node_modules/split-pane-react/esm/base.js
function getBEMElement(block, element) {
  return `${block}__${element}`;
}
function getBEMModifier(blockOrElement, modifier) {
  return `${blockOrElement}--${modifier}`;
}
var splitClassName = "react-split";
var splitDragClassName = getBEMModifier(splitClassName, "dragging");
var splitVerticalClassName = getBEMModifier(splitClassName, "vertical");
var splitHorizontalClassName = getBEMModifier(splitClassName, "horizontal");
var bodyDisableUserSelect = getBEMModifier(splitClassName, "disabled");
var paneClassName = getBEMElement(splitClassName, "pane");
var sashClassName = getBEMElement(splitClassName, "sash");
var sashVerticalClassName = getBEMModifier(sashClassName, "vertical");
var sashHorizontalClassName = getBEMModifier(sashClassName, "horizontal");
var sashDisabledClassName = getBEMModifier(sashClassName, "disabled");
var sashHoverClassName = getBEMModifier(sashClassName, "hover");
function classNames(...args) {
  const classList = [];
  for (const arg of args) {
    if (!arg)
      continue;
    const argType = typeof arg;
    if (argType === "string" || argType === "number") {
      classList.push(`${arg}`);
      continue;
    }
    if (argType === "object") {
      if (arg.toString !== Object.prototype.toString) {
        classList.push(arg.toString());
        continue;
      }
      for (const key in arg) {
        if (Object.hasOwnProperty.call(arg, key) && arg[key]) {
          classList.push(key);
        }
      }
    }
  }
  return classList.join(" ");
}
function assertsSize(size, sum, defaultValue = Infinity) {
  if (typeof size === "undefined")
    return defaultValue;
  if (typeof size === "number")
    return size;
  if (size.endsWith("%"))
    return sum * (+size.replace("%", "") / 100);
  if (size.endsWith("px"))
    return +size.replace("px", "");
  return defaultValue;
}

// node_modules/split-pane-react/esm/sash.js
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function Sash(_a) {
  var { className, render, onDragStart, onDragging, onDragEnd } = _a, others = __rest(_a, ["className", "render", "onDragStart", "onDragging", "onDragEnd"]);
  const timeout = (0, import_react2.useRef)(null);
  const [active, setActive] = (0, import_react2.useState)(false);
  const [draging, setDrag] = (0, import_react2.useState)(false);
  const handleMouseMove = function(e) {
    onDragging(e);
  };
  const handleMouseUp = function(e) {
    setDrag(false);
    onDragEnd(e);
    window.removeEventListener("mousemove", handleMouseMove);
    window.removeEventListener("mouseup", handleMouseUp);
  };
  return import_react2.default.createElement("div", Object.assign({ role: "Resizer", className: classNames(sashClassName, className), onMouseEnter: () => {
    timeout.current = setTimeout(() => {
      setActive(true);
    }, 150);
  }, onMouseLeave: () => {
    if (timeout.current) {
      setActive(false);
      clearTimeout(timeout.current);
    }
  }, onMouseDown: (e) => {
    setDrag(true);
    onDragStart(e);
    window.addEventListener("mousemove", handleMouseMove);
    window.addEventListener("mouseup", handleMouseUp);
  } }, others), render(draging || active));
}

// node_modules/split-pane-react/esm/SashContent.js
var import_react3 = __toESM(require_react());
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function SashContent(_a) {
  var { className, children, active, type } = _a, others = __rest2(_a, ["className", "children", "active", "type"]);
  return import_react3.default.createElement("div", Object.assign({ className: classNames("split-sash-content", active && "split-sash-content-active", type && `split-sash-content-${type}`, className) }, others), children);
}
var SashContent_default = SashContent;

// node_modules/split-pane-react/esm/SplitPane.js
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var SplitPane = (_a) => {
  var _b;
  var { children, sizes: propSizes, allowResize = true, split = "vertical", className: wrapClassName, sashRender = (_, active) => import_react4.default.createElement(SashContent_default, { active, type: "vscode" }), resizerSize = 4, performanceMode = false, onChange = () => null, onDragStart = () => null, onDragEnd = () => null } = _a, others = __rest3(_a, ["children", "sizes", "allowResize", "split", "className", "sashRender", "resizerSize", "performanceMode", "onChange", "onDragStart", "onDragEnd"]);
  const axis = (0, import_react4.useRef)({ x: 0, y: 0 });
  const wrapper = (0, import_react4.useRef)(null);
  const cacheSizes = (0, import_react4.useRef)({ sizes: [], sashPosSizes: [] });
  const [wrapperRect, setWrapperRect] = (0, import_react4.useState)({});
  const [isDragging, setDragging] = (0, import_react4.useState)(false);
  (0, import_react4.useEffect)(() => {
    const resizeObserver = new ResizeObserver(() => {
      var _a2, _b2;
      setWrapperRect((_b2 = (_a2 = wrapper === null || wrapper === void 0 ? void 0 : wrapper.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) !== null && _b2 !== void 0 ? _b2 : {});
    });
    resizeObserver.observe(wrapper.current);
    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  const { sizeName, splitPos, splitAxis } = (0, import_react4.useMemo)(() => ({
    sizeName: split === "vertical" ? "width" : "height",
    splitPos: split === "vertical" ? "left" : "top",
    splitAxis: split === "vertical" ? "x" : "y"
  }), [split]);
  const wrapSize = (_b = wrapperRect[sizeName]) !== null && _b !== void 0 ? _b : 0;
  const paneLimitSizes = (0, import_react4.useMemo)(() => children.map((childNode) => {
    const limits = [0, Infinity];
    if (childNode.type === Pane) {
      const { minSize, maxSize } = childNode.props;
      limits[0] = assertsSize(minSize, wrapSize, 0);
      limits[1] = assertsSize(maxSize, wrapSize);
    }
    return limits;
  }), [children, wrapSize]);
  const sizes = (0, import_react4.useMemo)(function() {
    let count = 0;
    let curSum = 0;
    const res = children.map((_, index) => {
      const size = assertsSize(propSizes[index], wrapSize);
      size === Infinity ? count++ : curSum += size;
      return size;
    });
    if (curSum > wrapSize || !count && curSum < wrapSize) {
      const cacheNum = (curSum - wrapSize) / curSum;
      return res.map((size) => {
        return size === Infinity ? 0 : size - size * cacheNum;
      });
    }
    if (count > 0) {
      const average = (wrapSize - curSum) / count;
      return res.map((size) => {
        return size === Infinity ? average : size;
      });
    }
    return res;
  }, [...propSizes, children.length, wrapSize]);
  const sashPosSizes = (0, import_react4.useMemo)(() => sizes.reduce((a, b) => [...a, a[a.length - 1] + b], [0]), [...sizes]);
  const dragStart = (0, import_react4.useCallback)(function(e) {
    var _a2, _b2;
    (_b2 = (_a2 = document === null || document === void 0 ? void 0 : document.body) === null || _a2 === void 0 ? void 0 : _a2.classList) === null || _b2 === void 0 ? void 0 : _b2.add(bodyDisableUserSelect);
    axis.current = { x: e.pageX, y: e.pageY };
    cacheSizes.current = { sizes, sashPosSizes };
    setDragging(true);
    onDragStart(e);
  }, [onDragStart, sizes, sashPosSizes]);
  const dragEnd = (0, import_react4.useCallback)(function(e) {
    var _a2, _b2;
    (_b2 = (_a2 = document === null || document === void 0 ? void 0 : document.body) === null || _a2 === void 0 ? void 0 : _a2.classList) === null || _b2 === void 0 ? void 0 : _b2.remove(bodyDisableUserSelect);
    axis.current = { x: e.pageX, y: e.pageY };
    cacheSizes.current = { sizes, sashPosSizes };
    setDragging(false);
    onDragEnd(e);
  }, [onDragEnd, sizes, sashPosSizes]);
  const onDragging = (0, import_react4.useCallback)(function(e, i) {
    const curAxis = { x: e.pageX, y: e.pageY };
    let distanceX = curAxis[splitAxis] - axis.current[splitAxis];
    const leftBorder = -Math.min(sizes[i] - paneLimitSizes[i][0], paneLimitSizes[i + 1][1] - sizes[i + 1]);
    const rightBorder = Math.min(sizes[i + 1] - paneLimitSizes[i + 1][0], paneLimitSizes[i][1] - sizes[i]);
    if (distanceX < leftBorder) {
      distanceX = leftBorder;
    }
    if (distanceX > rightBorder) {
      distanceX = rightBorder;
    }
    const nextSizes = [...sizes];
    nextSizes[i] += distanceX;
    nextSizes[i + 1] -= distanceX;
    onChange(nextSizes);
  }, [paneLimitSizes, onChange]);
  const paneFollow = !(performanceMode && isDragging);
  const paneSizes = paneFollow ? sizes : cacheSizes.current.sizes;
  const panePoses = paneFollow ? sashPosSizes : cacheSizes.current.sashPosSizes;
  return import_react4.default.createElement(
    "div",
    Object.assign({ className: classNames(splitClassName, split === "vertical" && splitVerticalClassName, split === "horizontal" && splitHorizontalClassName, isDragging && splitDragClassName, wrapClassName), ref: wrapper }, others),
    children.map((childNode, childIndex) => {
      const isPane = childNode.type === Pane;
      const paneProps = isPane ? childNode.props : {};
      return import_react4.default.createElement(Pane, { key: childIndex, className: classNames(paneClassName, paneProps.className), style: Object.assign(Object.assign({}, paneProps.style), { [sizeName]: paneSizes[childIndex], [splitPos]: panePoses[childIndex] }) }, isPane ? paneProps.children : childNode);
    }),
    sashPosSizes.slice(1, -1).map((posSize, index) => import_react4.default.createElement(Sash, { key: index, className: classNames(!allowResize && sashDisabledClassName, split === "vertical" ? sashVerticalClassName : sashHorizontalClassName), style: {
      [sizeName]: resizerSize,
      [splitPos]: posSize - resizerSize / 2
    }, render: sashRender.bind(null, index), onDragStart: dragStart, onDragging: (e) => onDragging(e, index), onDragEnd: dragEnd }))
  );
};
var SplitPane_default = SplitPane;
export {
  Pane,
  SashContent_default as SashContent,
  SplitPane_default as default
};
//# sourceMappingURL=split-pane-react.js.map
